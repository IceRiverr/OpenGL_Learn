
#version 330 core

out vec4 color;

in vec2 texC;

uniform sampler2D mainMap;

//正常
void main()
{
	color = texture(mainMap, vec2(texC.x, 1.0f - texC.y));
}

//反像
void main()
{
	color = vec4( vec3(1.0f - texture(mainMap, vec2(texC.x, 1.0f - texC.y)).rgb), 1.0f);
}

//灰度
void main()
{
	color = texture(mainMap, vec2(texC.x, 1.0f - texC.y));
	float average = (color.x + color.y + color.z) / 3.0f;
	color = vec4(average, average, average, 1.0f);
}

// 加强绿色
void main()
{
	color = texture(mainMap, vec2(texC.x, 1.0f - texC.y));
	float average = 0.2126f * color.x + 0.7152f * color.y + 0.0722f * color.z;
	color = vec4(average, average, average, 1.0f);
}

// kernel effects
// 锐化

const float offset = 1.0f / 500.0f;

void main()
{
	vec2 offsets[9] = vec2[](
		vec2(-offset, 	offset),
		vec2(0.0f,		offset),
		vec2(offset,	offset),
		vec2(-offset, 	0.0f),
		vec2(0.0f,		0.0f),
		vec2(offset,	0.0f),
		vec2(-offset, 	-offset),
		vec2(0.0f,		-offset),
		vec2(offset,	-offset)
	);
	
	float kernel[9] = float[](
		-1, -1, -1,
		-1,  9, -1,
		-1, -1, -1
	);
	
	vec3 sampleTex[9];
	for(int i = 0; i < 9; ++i)
	{
		sampleTex[i] = texture(mainMap, vec2(texC.x, 1.0f - texC.y) + offsets[i]).rgb;
	}
	
	vec3 resultColor;
	for(int i = 0; i < 9; ++i)
	{
		resultColor += sampleTex[i] * kernel[i];
	}
	
	color = vec4(resultColor, 1.0f);
}

// 模糊
	float kernel[9] = float[](
		1.0 / 16.0, 2.0 / 16.0, 1.0 / 16.0,
		2.0 / 16.0, 4.0 / 16.0, 2.0 / 16.0,
		1.0 / 16.0, 2.0 / 16.0, 1.0 / 16.0
	);

	float kernel[9] = float[](
		0.0625, 0.125, 0.0625,
		0.125, 0.25, 0.125,
		0.0625, 0.125, 0.0625
	); 

// 边检测
	
	float kernel[9] = float[](
		1, 1,  1,
		1, -8, 1,
		1, 1,  1
	); 









